package shocky3;

import org.pircbotx.PircBotX;
import org.pircbotx.hooks.Event;
import org.pircbotx.hooks.Listener;
import org.pircbotx.hooks.ListenerAdapter;
import org.pircbotx.hooks.events.ActionEvent;
import org.pircbotx.hooks.events.ChannelInfoEvent;
import org.pircbotx.hooks.events.ConnectEvent;
import org.pircbotx.hooks.events.DisconnectEvent;
import org.pircbotx.hooks.events.FingerEvent;
import org.pircbotx.hooks.events.HalfOpEvent;
import org.pircbotx.hooks.events.IncomingChatRequestEvent;
import org.pircbotx.hooks.events.IncomingFileTransferEvent;
import org.pircbotx.hooks.events.InviteEvent;
import org.pircbotx.hooks.events.JoinEvent;
import org.pircbotx.hooks.events.KickEvent;
import org.pircbotx.hooks.events.MessageEvent;
import org.pircbotx.hooks.events.ModeEvent;
import org.pircbotx.hooks.events.MotdEvent;
import org.pircbotx.hooks.events.NickAlreadyInUseEvent;
import org.pircbotx.hooks.events.NickChangeEvent;
import org.pircbotx.hooks.events.NoticeEvent;
import org.pircbotx.hooks.events.OpEvent;
import org.pircbotx.hooks.events.OwnerEvent;
import org.pircbotx.hooks.events.PartEvent;
import org.pircbotx.hooks.events.PingEvent;
import org.pircbotx.hooks.events.PrivateMessageEvent;
import org.pircbotx.hooks.events.QuitEvent;
import org.pircbotx.hooks.events.RemoveChannelBanEvent;
import org.pircbotx.hooks.events.RemoveChannelKeyEvent;
import org.pircbotx.hooks.events.RemoveChannelLimitEvent;
import org.pircbotx.hooks.events.RemoveInviteOnlyEvent;
import org.pircbotx.hooks.events.RemoveModeratedEvent;
import org.pircbotx.hooks.events.RemoveNoExternalMessagesEvent;
import org.pircbotx.hooks.events.RemovePrivateEvent;
import org.pircbotx.hooks.events.RemoveSecretEvent;
import org.pircbotx.hooks.events.RemoveTopicProtectionEvent;
import org.pircbotx.hooks.events.ServerPingEvent;
import org.pircbotx.hooks.events.ServerResponseEvent;
import org.pircbotx.hooks.events.SetChannelBanEvent;
import org.pircbotx.hooks.events.SetChannelKeyEvent;
import org.pircbotx.hooks.events.SetChannelLimitEvent;
import org.pircbotx.hooks.events.SetInviteOnlyEvent;
import org.pircbotx.hooks.events.SetModeratedEvent;
import org.pircbotx.hooks.events.SetNoExternalMessagesEvent;
import org.pircbotx.hooks.events.SetPrivateEvent;
import org.pircbotx.hooks.events.SetSecretEvent;
import org.pircbotx.hooks.events.SetTopicProtectionEvent;
import org.pircbotx.hooks.events.SocketConnectEvent;
import org.pircbotx.hooks.events.SuperOpEvent;
import org.pircbotx.hooks.events.TimeEvent;
import org.pircbotx.hooks.events.TopicEvent;
import org.pircbotx.hooks.events.UnknownEvent;
import org.pircbotx.hooks.events.UserListEvent;
import org.pircbotx.hooks.events.UserModeEvent;
import org.pircbotx.hooks.events.VersionEvent;
import org.pircbotx.hooks.events.VoiceEvent;
import org.pircbotx.hooks.events.WhoisEvent;
import org.pircbotx.hooks.types.GenericCTCPEvent;
import org.pircbotx.hooks.types.GenericChannelEvent;
import org.pircbotx.hooks.types.GenericChannelModeEvent;
import org.pircbotx.hooks.types.GenericChannelUserEvent;
import org.pircbotx.hooks.types.GenericDCCEvent;
import org.pircbotx.hooks.types.GenericMessageEvent;
import org.pircbotx.hooks.types.GenericUserEvent;
import org.pircbotx.hooks.types.GenericUserModeEvent;

public abstract class ListenerPlugin extends Plugin {
	public final Listener<PircBotX> listener;
	
	public ListenerPlugin(PluginInfo pinfo) {
		super(pinfo);
		listener = new MyListener(this);
	}
	
	protected class MyListener extends ListenerAdapter<PircBotX> {
		public final ListenerPlugin plugin;
		
		public MyListener(ListenerPlugin plugin) {
			this.plugin = plugin;
		}
		
		public void onAction(ActionEvent<PircBotX> e) { plugin.onAction(e); }
		public void onChannelInfo(ChannelInfoEvent<PircBotX> e) { plugin.onAction(e); }
		public void onConnect(ConnectEvent<PircBotX> e) { plugin.onAction(e); }
		public void onDisconnect(DisconnectEvent<PircBotX> e) { plugin.onAction(e); }
		public void onEvent(Event<PircBotX> e) { plugin.onAction(e); }
		public void onFinger(FingerEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericChannel(GenericChannelEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericChannelMode(GenericChannelModeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericChannelUser(GenericChannelUserEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericCTCP(GenericCTCPEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericDCC(GenericDCCEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericMessage(GenericMessageEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericUser(GenericUserEvent<PircBotX> e) { plugin.onAction(e); }
		public void onGenericUserMode(GenericUserModeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onHalfOp(HalfOpEvent<PircBotX> e) { plugin.onAction(e); }
		public void onIncomingChatRequest(IncomingChatRequestEvent<PircBotX> e) { plugin.onAction(e); }
		public void onIncomingFileTransfer(IncomingFileTransferEvent<PircBotX> e) { plugin.onAction(e); }
		public void onInvite(InviteEvent<PircBotX> e) { plugin.onAction(e); }
		public void onJoin(JoinEvent<PircBotX> e) { plugin.onAction(e); }
		public void onKick(KickEvent<PircBotX> e) { plugin.onAction(e); }
		public void onMessage(MessageEvent<PircBotX> e) { plugin.onAction(e); }
		public void onMode(ModeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onMotd(MotdEvent<PircBotX> e) { plugin.onAction(e); }
		public void onNickAlreadyInUse(NickAlreadyInUseEvent<PircBotX> e) { plugin.onAction(e); }
		public void onNickChange(NickChangeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onNotice(NoticeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onOp(OpEvent<PircBotX> e) { plugin.onAction(e); }
		public void onOwner(OwnerEvent<PircBotX> e) { plugin.onAction(e); }
		public void onPart(PartEvent<PircBotX> e) { plugin.onAction(e); }
		public void onPing(PingEvent<PircBotX> e) { plugin.onAction(e); }
		public void onPrivateMessage(PrivateMessageEvent<PircBotX> e) { plugin.onAction(e); }
		public void onQuit(QuitEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveChannelBan(RemoveChannelBanEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveChannelKey(RemoveChannelKeyEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveChannelLimit(RemoveChannelLimitEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveInviteOnly(RemoveInviteOnlyEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveModerated(RemoveModeratedEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveNoExternalMessages(RemoveNoExternalMessagesEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemovePrivate(RemovePrivateEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveSecret(RemoveSecretEvent<PircBotX> e) { plugin.onAction(e); }
		public void onRemoveTopicProtection(RemoveTopicProtectionEvent<PircBotX> e) { plugin.onAction(e); }
		public void onServerPing(ServerPingEvent<PircBotX> e) { plugin.onAction(e); }
		public void onServerResponse(ServerResponseEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetChannelBan(SetChannelBanEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetChannelKey(SetChannelKeyEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetChannelLimit(SetChannelLimitEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetInviteOnly(SetInviteOnlyEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetModerated(SetModeratedEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetNoExternalMessages(SetNoExternalMessagesEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetPrivate(SetPrivateEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetSecret(SetSecretEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSetTopicProtection(SetTopicProtectionEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSocketConnect(SocketConnectEvent<PircBotX> e) { plugin.onAction(e); }
		public void onSuperOp(SuperOpEvent<PircBotX> e) { plugin.onAction(e); }
		public void onTime(TimeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onTopic(TopicEvent<PircBotX> e) { plugin.onAction(e); }
		public void onUnknown(UnknownEvent<PircBotX> e) { plugin.onAction(e); }
		public void onUserList(UserListEvent<PircBotX> e) { plugin.onAction(e); }
		public void onUserMode(UserModeEvent<PircBotX> e) { plugin.onAction(e); }
		public void onVersion(VersionEvent<PircBotX> e) { plugin.onAction(e); }
		public void onVoice(VoiceEvent<PircBotX> e) { plugin.onAction(e); }
		public void onWhois(WhoisEvent<PircBotX> e) { plugin.onAction(e); }
	}
}