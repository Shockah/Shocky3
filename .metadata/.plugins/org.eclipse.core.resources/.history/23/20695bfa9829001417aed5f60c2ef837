package shocky3;

import java.io.File;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import pl.shockah.FileIO;
import pl.shockah.Util;
import pl.shockah.json.JSONObject;
import pl.shockah.json.JSONParser;
import shocky3.ident.HostIdentHandler;
import shocky3.ident.IdentGroup;
import shocky3.ident.IdentHandler;
import shocky3.ident.NickIdentHandler;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;

public class Shocky {
	public static CustomPrintStream sysout;
	public static final File configFile = new File("config.json");
	
	public static void main(String[] args) {
		System.setOut(sysout = new CustomPrintStream());
		System.setProperty("org.slf4j.simpleLogger.logFile", "System.out");
		System.setProperty("org.slf4j.simpleLogger.showDateTime", "true");
		System.setProperty("org.slf4j.simpleLogger.dateTimeFormat", "[dd.MM.yyyy HH:mm:ss]");
		System.setProperty("org.slf4j.simpleLogger.showThreadName", "false");
		System.setProperty("org.slf4j.simpleLogger.showLogName", "false");
		System.setProperty("org.slf4j.simpleLogger.showShortLogName", "false");
		new Shocky().run();
	}
	
	public final Settings settings;
	public final ServerManager serverManager;
	public final PluginManager pluginManager;
	public final List<IdentHandler> identHandlers = Collections.synchronizedList(new LinkedList<IdentHandler>());
	public final List<IdentGroup> identGroups = Collections.synchronizedList(new LinkedList<IdentGroup>());
	public boolean running = false;
	public MongoClient mongo = null;
	protected String mongoDb = null;
	
	public Shocky() {
		settings = new Settings(this);
		serverManager = new ServerManager(this);
		pluginManager = new PluginManager(this);
		
		add(
			new NickIdentHandler(),
			new HostIdentHandler()
		);
	}
	
	public void add(IdentHandler... hs) {
		for (IdentHandler h : hs) {
			if (!identHandlers.contains(h)) {
				identHandlers.add(h);
			}
		}
		for (BotManager manager : serverManager.botManagers) {
			manager.identHandlers.clear();
			for (IdentHandler h : identHandlers) {
				manager.identHandlers.add(h.copy(manager));
			}
		}
	}
	public void remove(IdentHandler... hs) {
		for (IdentHandler h : hs) {
			identHandlers.remove(h);
		}
		for (BotManager manager : serverManager.botManagers) {
			manager.identHandlers.clear();
			for (IdentHandler h : identHandlers) {
				manager.identHandlers.add(h.copy(manager));
			}
		}
	}
	
	public List<IdentGroup> userIdentGroups(PircBotX bot, User user) {
		return userIdentGroups(botToManager(bot), user);
	}
	public List<IdentGroup> userIdentGroups(BotManager manager, User user) {
		List<IdentGroup> list = new LinkedList<>();
		if (manager != null) {
			for (IdentGroup igroup : manager.identGroups) {
				if (igroup.userBelongs(user)) {
					list.add(igroup);
				}
			}
		}
		for (IdentGroup igroup : identGroups) {
			if (igroup.userBelongs(user)) {
				list.add(igroup);
			}
		}
		return list;
	}
	public boolean userHasPermission(PircBotX bot, User user, String permission) {
		return userHasPermission(botToManager(bot), user, permission);
	}
	public boolean userHasPermission(BotManager manager, User user, String permission) {
		for (IdentGroup igroup : userIdentGroups(manager, user)) {
			if (igroup.hasPermission(permission)) {
				return true;
			}
		}
		return false;
	}
	
	public IdentHandler getIdentHandlerFor(String account) {
		System.out.println(account);
		String[] spl = account.split(":");
		if (spl.length == 1) return null;
		for (IdentHandler h : identHandlers) {
			System.out.println(String.format("%s == %s", h.id, spl[0]));
			if (h.id.equals(spl[0])) {
				return h;
			}
		}
		return null;
	}
	
	public BotManager botToManager(PircBotX bot) {
		for (BotManager manager : serverManager.botManagers) {
			if (manager.bots.contains(bot)) {
				return manager;
			}
		}
		return null;
	}
	
	public void run() {
		running = true;
		
		JSONObject j = null;
		if (configFile.exists()) {
			try {
				j = new JSONParser().parseObject(FileIO.readWholeString(configFile));
			} catch (Exception e) {}
		}
		if (j == null) j = new JSONObject();
		
		try {
			JSONObject jMongo = j.contains("mongo") ? j.getObject("mongo") : new JSONObject();
			String mHost = jMongo.contains("host") ? jMongo.getString("host") : null;
			int mPort = jMongo.contains("port") ? jMongo.getInt("port") : 0;
			
			mongo = mPort == 0 ? (mHost == null ? new MongoClient() : new MongoClient(mHost)) : new MongoClient(mHost, mPort);
			mongoDb = jMongo.getString("db");
			mongo = new MongoClient();
			
			settings.read();
			readIdentGroups();
			
			pluginManager.readPlugins();
			pluginManager.reload();
			
			serverManager.readConfig();
			
			while (running) {
				Util.sleep(50);
			}
		} catch (Exception e) {e.printStackTrace();}
		
		for (BotManager bm : serverManager.botManagers) {
			for (PircBotX bot : bm.bots) {
				bot.stopBotReconnect();
				bot.sendIRC().quitServer();
			}
		}
	}
	
	public void stop() {
		running = false;
	}
	
	private	void readIdentGroups() {
		DBCollection dbc = collection("identGroups");
		for (DBObject dbo : JSONUtil.all(dbc.find(JSONUtil.toDBObject(JSONObject.make(
			"server", "*"
		))))) {
			JSONObject j = JSONUtil.fromDBObject(dbo);
			
			IdentGroup igroup = new IdentGroup(this, null, j.getString("name"));
			for (String s : j.getList("idents").ofStrings()) {
				igroup.idents.add(s);
			}
			for (String s : j.getList("permissions").ofStrings()) {
				igroup.permissions.add(s);
			}
			identGroups.add(igroup);
		}
	}
	
	public DB db() {
		return mongo.getDB(mongoDb);
	}
	public DBCollection collection(String c) {
		return db().getCollection(c);
	}
}