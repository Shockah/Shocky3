package sidentityns;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import org.pircbotx.hooks.events.WhoisEvent;
import pl.shockah.Util;
import shocky3.BotManager;
import shocky3.ident.IdentHandler;

public class NickServIdentHandler extends IdentHandler {
	public static final int
		MAX_WAIT_TIME = 1000 * 5, //5 seconds
		RECHECK_DELAY = 1000 * 60 * 5; //5 minutes
	
	protected WhoisEvent<PircBotX> whois = null;
	protected Map<String, UserEntry> map = Collections.synchronizedMap(new HashMap<String, UserEntry>());
	
	public NickServIdentHandler() {
		this(null);
	}
	public NickServIdentHandler(BotManager manager) {
		super(manager, "ns");
	}
	
	public IdentHandler copy(BotManager manager) {
		return new NickServIdentHandler(manager);
	}
	
	public boolean checkAvailability() {
		if (manager.bots().isEmpty()) {
			manager.connectNewBot();
		}
		PircBotX bot = manager.bots().get(0);
		whois = null;
		long sentAt = System.currentTimeMillis();
		bot.sendRaw().rawLine("WHOIS NickServ");
		while (whois == null) {
			long now = System.currentTimeMillis();
			if (now - sentAt >= MAX_WAIT_TIME) return false;
			Util.sleep(50);
		}
		
		return whois.getServerInfo().toLowerCase().contains("network service");
	}
	
	public String account(User user) {
		if (map.containsKey(user.getNick())) {
			UserEntry ue = map.get(user.getNick());
			if (ue.isStillValid()) {
				if (ue.acc == null) {
					map.remove(user.getNick());
				}
				return ue.acc;
			} else {
				map.remove(user.getNick());
			}
		}
		
		if (manager.bots().isEmpty()) {
			manager.connectNewBot();
		}
		PircBotX bot = manager.bots().get(0);
		long sentAt = System.currentTimeMillis();
		bot.sendIRC().notice("NickServ", String.format("acc %s *", user.getNick()));
		while (!map.containsKey(user.getNick())) {
			long now = System.currentTimeMillis();
			if (now - sentAt >= MAX_WAIT_TIME) return null;
			Util.sleep(50);
		}
		
		UserEntry ue = map.get(user.getNick());
		return ue.acc;
	}
	
	public boolean isAccount(User user, String account) {
		String acc = account(user);
		return acc.equals(account);
	}
	
	public class UserEntry {
		public final String acc;
		public final long checkTime;
		
		public UserEntry(String acc) {
			this.acc = acc;
			checkTime = System.currentTimeMillis();
		}
		
		public boolean isStillValid() {
			long now = System.currentTimeMillis();
			return now - checkTime < RECHECK_DELAY;
		}
	}
}